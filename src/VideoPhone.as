package{			import com.greensock.TweenMax;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.ImageLoader;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.MP3Loader;	import com.greensock.loading.VideoLoader;	import com.greensock.loading.XMLLoader;	import com.greensock.loading.display.ContentDisplay;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VolumePlugin;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.external.ExternalInterface;	import flash.geom.Matrix;	import flash.geom.PerspectiveProjection;	import flash.geom.Point;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.LoaderContext;	import flash.system.Security;	import flash.ui.Mouse;	import flash.utils.*;		import fsharp.ui.AudioControl;	import fsharp.ui.PhoneUI;	import fsharp.ui.Preloader;
		//import flash.text.TextField;	//import fsharp.ui.TestSlider;		public class VideoPhone extends Sprite	{		private var xmlPath : String = "config.xml";		private var configXml : XML;		private var imagePath:String;		private var imageList:Array;		private var videoPath:String;		private var audioPath:String;		private var i:Number;		private var phoneHolder:PhoneUI;		private var currentPhoneFrame:Number = 0;		private var currentPhoneMouseX:Number = -1;		//keeps track of the VideoLoader that is currently playing		private var _currentVideo:VideoLoader;						private var totalImgNum:Number;		private var videoWidth:Number;		private var videoHeight:Number;				private var videoX:Number;		private var videoY:Number;				private var video:Video;		private var videoHolder:Sprite;		private var angle:Number = 0;		private var speed:Number = 5;		public var mainHolder:Sprite;		//		private var sliderX:TestSlider;//		private var sliderY:TestSlider;//		private var sliderZ:TestSlider;//		private var sliderFV:TestSlider;//		private var sliderScale:TestSlider;//		private var sliderFrame:TestSlider;//		private var sliderPX:TestSlider;//		private var sliderPY:TestSlider;//		//		private var sliderScaleX:TestSlider;//		private var sliderScaleY:TestSlider;//		private var phoneFrameLabel:TextField;						private var audioFrontLoader:MP3Loader;		private var audioBackLoader:MP3Loader;		private var currentSC:SoundChannel;		private var currentPan:Number = 0;				private var playAudioBack:Boolean = false;		private var ns:NetStream;		private var videoBuffering:Boolean = true;		private var _rotationHint:Sprite;		private var _audioControl:AudioControl;		private var _cta:MovieClip;				public var preloader_mc:Preloader;		public var exploreBtn:MovieClip;		public var htcHeader:MovieClip;		public var soundBtn:MovieClip;		public var fbBtn:MovieClip;		public var twitterBtn:MovieClip;		public var playBtn:MovieClip;		private var stageBg:MovieClip;		private var rotationBtn:MovieClip;		private var initPlayFlag : Boolean = true;		private var videoEnded:Boolean = false;				private var videoSmall = [];		private var videoNormal = [];		private var phoneSmall = [];		private var audioLoadTotal = 18;		private var imageLoadTotal = 82;				public function VideoPhone()		{			Security.loadPolicyFile("http://content.bitsontherun.com/crossdomain.xml");			Security.loadPolicyFile("http://d2gi7ultltnc2u.cloudfront.net/crossdomain.xml");			Security.loadPolicyFile("https://fsharp.s3.amazonaws.com/crossdomain.xml");			Security.allowDomain("*");			Security.allowInsecureDomain("*");									LoaderMax.activate([XMLLoader, ImageLoader, MP3Loader, VideoLoader]);			TweenPlugin.activate([VolumePlugin]);						var loader:XMLLoader = new XMLLoader(xmlPath, {name:"configXML", onComplete:onXMLLoaded, onProgress:onXMLProgress});			loader.load();						stageBg = getMovieClipFromLibrary("stageBg");			stageBg.alpha = 1;			stageBg.buttonMode = false;						htcHeader = getMovieClipFromLibrary("htcHeader");			htcHeader.alpha = 0;			htcHeader.buttonMode = false;			htcHeader.x = 310.95;			htcHeader.y = 33;						preloader_mc = Preloader(getMovieClipFromLibrary("preloader"));			//preloader_mc.alpha = 0;			preloader_mc.init()			preloader_mc.buttonMode = false;			preloader_mc.x = 408;			preloader_mc.y = 220;						initAnimation();		}				private function onXMLProgress(event:LoaderEvent):void {			preloader_mc.updateProgress(Math.ceil( audioLoadTotal * event.target.progress));			trace("progress: " + event.target.progress);		}				private function onXMLLoaded(event:LoaderEvent):void {			var queue:LoaderMax = new LoaderMax({name:"mainQueue", onProgress:progressHandler, onComplete:onAllLoaded, onError:errorHandler, onOpen:onImageOpen});						audioFrontLoader = LoaderMax.getLoader("audioFront");			audioBackLoader = LoaderMax.getLoader("audioBack");			configXml = LoaderMax.getContent("configXML");						videoPath = configXml..videoloader.@url;			audioPath = configXml.audio.@loc;			videoX = configXml..videoloader.@videoX;			videoY = configXml..videoloader.@videoY;			videoWidth = configXml..videoloader.@width;			videoHeight = configXml..videoloader.@height;						videoSmall.scale = Number(configXml.videoSmall.@scale);			videoSmall.y = Number(configXml.videoSmall.@y);						videoNormal.scale = Number(configXml.videoNormal.@scale);			videoNormal.y = Number(configXml.videoNormal.@y);						phoneSmall.scale = Number(configXml.phoneSmall.@scale);			phoneSmall.y = Number(configXml.phoneSmall.@y);			totalImgNum = Number(configXml.images.@total);			for (i = 0; i < totalImgNum; i++) {				//append the ImageLoader and several other loaders				queue.append( new ImageLoader(String(configXml.images.@loc) + (Number(configXml.images.@start) + i) + configXml.images.@type, {name:"image"+i, container:this, centerRegistration:false, alpha:0, noCache:false}) );							}			imageList = new Array(totalImgNum);						//start loading			queue.load();					}								private function onImageOpen(event:LoaderEvent):void {			trace("onImageOpen: " + event.target.progress);		}				private function progressHandler(event:LoaderEvent):void {			preloader_mc.updateProgress(Math.ceil( audioLoadTotal + imageLoadTotal * event.target.progress));			trace("progress: " + event.target.progress);		}				private function completeHandler(event:LoaderEvent):void {			var image:ContentDisplay = LoaderMax.getContent("photo1");			TweenMax.to(image, 1, {alpha:1, y:100});			trace(event.target + " is complete!");		}				private function errorHandler(event:LoaderEvent):void {			trace("error occured with " + event.target + ": " + event.text);		}				private function onXMLFailed(e:Event):void {			trace("xml failed to load");		}		private function onAllLoaded(e:LoaderEvent):void {			mainHolder = new Sprite;			addChild(mainHolder);									videoHolder = new Sprite;			mainHolder.addChild(videoHolder);									phoneHolder = new PhoneUI();			mainHolder.addChild(phoneHolder);			for (i = 0; i < imageList.length; i++) {				imageList[i] = LoaderMax.getContent("image"+i);			}						phoneHolder.init(imageList);			phoneHolder.showPhoneFrame(currentPhoneFrame);			video = new Video();			video.width = videoWidth;			video.height = videoHeight;												videoHolder.addChild(video);											playBtn = getMovieClipFromLibrary("playBtn");			playBtn.x = -20+32.5;			playBtn.y = -35+32.5;			playBtn.addEventListener(MouseEvent.CLICK,onPlayClick);			videoHolder.addChild(playBtn);									/***********************************/			var Type:Class = getDefinitionByName("container") as Class;			var myBox:MovieClip = new Type();						myBox.x = videoHolder.x = videoX;			myBox.y = videoHolder.y = videoY;									addChild(myBox);//			//			phoneFrameLabel = createCustomTextField(300, 520, 200, 20);//			//			phoneFrameLabel.text = "Current phone frame index " + currentPhoneFrame;//						//			//			sliderX = new TestSlider;//			sliderX.init("Video Rotation X", 0 , 1080);//			sliderX.x = 20;//			sliderX.y = 520;//			//			sliderY = new TestSlider;//			sliderY.init("Video Rotation Y", 0 , 1080);//			sliderY.x = (40 + 100)*1;//			sliderY.y = 520;////			sliderZ = new TestSlider;//			sliderZ.init("Video Rotation Z", 0 , 1080);//			sliderZ.x = (40 + 100)*2;//			sliderZ.y = 520;////			//			sliderFV = new TestSlider;//			sliderFV.init("fieldOfView", 1, 179);//			sliderFV.x = (40 + 100)*3;//			sliderFV.y = 520;//			sliderFV.updateSliderValue(55);//			//			sliderScale = new TestSlider;//			sliderScale.init("Scale", 1, 1.2, .01);//			sliderScale.x = (40 + 100)*4;//			sliderScale.y = 520;//			sliderScale.updateSliderValue(1);//			//			sliderFrame = new TestSlider;//			sliderFrame.init("Frame #", 0, imageList.length-1);//			sliderFrame.x = (40 + 100)*5-20;//			sliderFrame.y = 520;//			sliderFrame.updateSliderValue(0);//			//			sliderScaleX = new TestSlider;//			sliderScaleX.init("Scale x", 1, 1.2, .01);//			sliderScaleX.x = (40 + 100)*2;//			sliderScaleX.y = 620;//			sliderScaleX.updateSliderValue(1);//			//			sliderScaleY = new TestSlider;//			sliderScaleY.init("Scale y", 1, 1.2, .01);//			sliderScaleY.x = (40 + 100)*3;//			sliderScaleY.y = 620;//			sliderScaleY.updateSliderValue(1);//			//			sliderPX = new TestSlider;//			sliderPX.init("Frame X", 0, 200);//			sliderPX.x = (40 + 100)*4;//			sliderPX.y = 620;//			sliderPX.updateSliderValue(100);//			//			sliderPY = new TestSlider;//			sliderPY.init("Frame y", 0, 200);//			sliderPY.x = (40 + 100)*5-20;//			sliderPY.y = 620;//			sliderPY.updateSliderValue(100);//			//			//			addChild(sliderScale);//			addChild(sliderScaleX);//			addChild(sliderScaleY);//			//			addChild(sliderZ);////		//			addChild(sliderX);//			//			addChild(sliderY);//			//			//			addChild(sliderPX);//			//			addChild(sliderPY);//			//			addChild(sliderFV);//			//			addChild(sliderFrame);//			/***********************************///			//			sliderX.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderY.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderZ.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderFV.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderScale.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);			//			sliderFrame.addEventListener(TestSlider.UPDATE_VIDEO_3D, updatePhoneFrameTest);	//			sliderPX.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);	//			sliderPY.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderScaleX.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);//			sliderScaleY.addEventListener(TestSlider.UPDATE_VIDEO_3D, updateVideoPerspective);			var nc:NetConnection = new NetConnection();			nc.connect(null);						ns = new NetStream(nc);			ns.client = {onMetaData:ns_onMetaData, onCuePoint:ns_onCuePoint};						ns.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);									video.attachNetStream(ns);			ns.play(videoPath);									var audioTransform: SoundTransform = new SoundTransform();			audioTransform.volume = 0;			ns.soundTransform = audioTransform;						phoneHolder.initHitArea();					mainHolder.addEventListener(MouseEvent.MOUSE_OVER, showHint);			mainHolder.addEventListener(MouseEvent.MOUSE_DOWN, onPhoneOver);			mainHolder.addEventListener(MouseEvent.MOUSE_OUT, onPhoneOut);			mainHolder.addEventListener(MouseEvent.MOUSE_UP, onPhoneOut);						var symbolClass:Class;						symbolClass=getDefinitionByName("rotationHint") as Class;			_rotationHint=new symbolClass();			//addChild(_rotationHint);			_rotationHint.visible = false;									rotationBtn = getMovieClipFromLibrary("rotationBtn");			//preloader_mc.alpha = 0;			rotationBtn.buttonMode = true;			rotationBtn.x = 15;			rotationBtn.y = 19;			rotationBtn.addEventListener(MouseEvent.CLICK, onPhoneRotate);			TweenMax.to(playBtn, .3, {alpha:1});			TweenMax.to(rotationBtn, .3, {alpha:1});		}				private function getMovieClipFromLibrary($name:String):MovieClip {			var TypeCTA:Class = getDefinitionByName($name) as Class;			var _mc:MovieClip = new TypeCTA();			//_mc.visible = false;			_mc.alpha = 0;			_mc.buttonMode = true;			addChild(_mc);			return _mc;		}				private function initAnimation():void {									exploreBtn = getMovieClipFromLibrary("exploreBtn");			exploreBtn.x = 556;			exploreBtn.y = 424;			exploreBtn.addEventListener(MouseEvent.CLICK,onCTAClick);			_audioControl = AudioControl(getMovieClipFromLibrary("AudioControl"));			_audioControl.x = 11.5;			_audioControl.y = 429.5;			_audioControl.addEventListener(MouseEvent.CLICK, onAudioClick);						fbBtn = getMovieClipFromLibrary("facebookBtn");			fbBtn.x = 755.95;			fbBtn.y = 20;			fbBtn.addEventListener(MouseEvent.CLICK,onFBClick);						twitterBtn = getMovieClipFromLibrary("twitterBtn");			twitterBtn.x = 781.95;			twitterBtn.y = 20;			twitterBtn.addEventListener(MouseEvent.CLICK,onTwitterClick);						TweenMax.to(exploreBtn, .3, {delay:.3,alpha:1});			TweenMax.to(htcHeader, .3, {delay:.3,alpha:1});			TweenMax.to(_audioControl, .3, {delay:.3,alpha:1});			TweenMax.to(fbBtn, .3, {delay:.3,alpha:1});			TweenMax.to(twitterBtn, .3, {delay:.3,alpha:1});			htcHeader.visible = true;					}		private function onPlayClick(e:MouseEvent):void {			if (videoEnded) {				ns.seek(0);			} else {				ns.resume();								audioBackLoader.gotoSoundTime(ns.time,false);				audioFrontLoader.gotoSoundTime(ns.time,false);				audioFrontLoader.pauseSound();				audioBackLoader.pauseSound();								playAudio();				videoBuffering = false;			}			playBtn.alpha = 0;			playBtn.visible = false;			initPlayFlag = false;		}						private function onCTAClick(e:MouseEvent) : void {			ExternalInterface.call("explore");			trace("onCTAClick");					}				private function onAudioClick(e:MouseEvent) : void {						var _soundTransform = new SoundTransform();			if (_audioControl.mute) {								_soundTransform.volume = 0;					_audioControl.gotoAndStop("off");			} else {				_soundTransform.volume = 1;				_audioControl.gotoAndStop("on");			}			if (currentSC) currentSC.soundTransform = _soundTransform;		}		private function onFBClick(e:MouseEvent) : void {			ExternalInterface.call("launchFB");			trace("launchFB");					}		private function onTwitterClick(e:MouseEvent) : void {			ExternalInterface.call("launchTwitter");			trace("launchTwitter");					}//		private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {//			var result:TextField = new TextField();//			result.x = x; result.y = y;//			result.width = width; result.height = height;//			addChild(result);//			return result;//		}						private function updatePhoneFrameTest(e:Event=null) : void {//			currentPhoneFrame = sliderFrame.value;//			phoneFrameLabel.text = "Current phone frame index " + currentPhoneFrame;						phoneHolder.showPhoneFrame(currentPhoneFrame);			updateVideoPerspective();		}		private function updateVideoPerspective(e:Event=null) : void {			var rotationObj = {};						var audioFrontLeftFrame = 25;			var audioFrontRightFrame = 10;			var audioBackRightFrame = 17;						var audioPopLeftFrame = 15;			var audioPopRightFrame = 21;						var rotationData:XML;			trace("currentPhoneFrame=" + currentPhoneFrame);			trace("currentPhoneFrame data length=" + configXml..rotation.(@id == currentPhoneFrame).length());			if (configXml..rotation.(@id == currentPhoneFrame).length()) {				rotationData = configXml..rotation.(@id == currentPhoneFrame)[0];			}									if (e == null && rotationData) {				rotationObj.rotationX = rotationData.@x;				rotationObj.rotationY = rotationData.@y;				rotationObj.rotationZ = rotationData.@z;				rotationObj.scale = rotationData.@scale;				rotationObj.fv = rotationData.@fv;									if (rotationData.@px) {					rotationObj.px = videoX + Number(rotationData.@px);					rotationObj.py = videoY + Number(rotationData.@py);					//					sliderPX.updateSliderValue(100 + Number(rotationData.@px));//					sliderPY.updateSliderValue(100 + Number(rotationData.@py));				}				if (rotationData.@scaleX) {					rotationObj.scaleX = rotationData.@scaleX;					rotationObj.scaleY = rotationData.@scaleY;				} else {					rotationObj.scaleX = rotationData.@scale;					rotationObj.scaleY = rotationData.@scale;				}//				sliderX.updateSliderValue(rotationObj.rotationX);//				sliderY.updateSliderValue(rotationObj.rotationY);//				sliderZ.updateSliderValue(rotationObj.rotationZ);//				sliderScale.updateSliderValue(rotationObj.scale);//				sliderScaleX.updateSliderValue(rotationObj.scaleX);//				sliderScaleY.updateSliderValue(rotationObj.scaleY);//				sliderFV.updateSliderValue(rotationObj.fv);			} else {								rotationObj.rotationX = 0;				rotationObj.rotationY = 0;				rotationObj.rotationZ = 0;				rotationObj.scale = 1;				rotationObj.fv = 55;								rotationObj.scaleX = 1;				rotationObj.scaleY = 1;								rotationObj.px = videoX;				rotationObj.py = videoY;				//				rotationObj.rotationX = sliderX.value;//				rotationObj.rotationY = sliderY.value;//				rotationObj.rotationZ = sliderZ.value;//				rotationObj.scale = sliderScale.value;//				rotationObj.fv = sliderFV.value;//				//				rotationObj.scaleX = sliderScaleX.value;//				rotationObj.scaleY = sliderScaleY.value;//				//				rotationObj.px = videoX + sliderPX.value-100;//				rotationObj.py = videoY + sliderPY.value-100;			}			var tweenTime = .2;			var pp:PerspectiveProjection=new PerspectiveProjection();			TweenMax.killTweensOf(videoHolder);			//adjust video position			if (((currentPhoneFrame >= audioFrontRightFrame && currentPhoneFrame <= audioPopLeftFrame) || (currentPhoneFrame >= audioPopRightFrame && currentPhoneFrame <= audioFrontLeftFrame))) {				if (videoHolder.scaleX != videoSmall.scale && phoneHolder.imagesHolder.scaleX == 1) {					videoHolder.alpha = 0;				}				if (manualRotate) {					videoHolder.alpha = 0;				}				videoHolder.rotationX = videoHolder.rotationY  = videoHolder.rotationZ = 0;				videoHolder.transform.perspectiveProjection=pp;				trace("reveal 20%=" +videoSmall.scale);				trace("reveal videoSmall.y=" +videoSmall.y);				TweenMax.to(videoHolder, tweenTime, {y:videoSmall.y, alpha:1, scaleX:videoSmall.scale,scaleY:videoSmall.scale});				TweenMax.to(phoneHolder.imagesHolder, tweenTime, {y:0, scaleX:1,scaleY:1});								if (manualRotate) {					TweenMax.killTweensOf(videoHolder);					TweenMax.killTweensOf(phoneHolder.imagesHolder);										TweenMax.to(videoHolder, 0, {y:videoY, scaleX:1, scaleY:1});					TweenMax.to(phoneHolder.imagesHolder, tweenTime, {y:0, scaleX:1,scaleY:1});				}							} else if (currentPhoneFrame > audioPopLeftFrame && currentPhoneFrame < audioPopRightFrame) {				videoHolder.alpha = 1;				videoHolder.rotationX = videoHolder.rotationY  = videoHolder.rotationZ = 0;				videoHolder.transform.perspectiveProjection=pp;				trace("reveal 100%");				if (manualRotate) {					videoHolder.alpha = 0;				}				//video reveal 100%, phone shrinks				TweenMax.to(videoHolder, tweenTime, {y:videoNormal.y, scaleX:videoNormal.scale,scaleY:videoNormal.scale});				TweenMax.to(phoneHolder.imagesHolder, tweenTime, {y:phoneSmall.y, scaleX:phoneSmall.scale,scaleY:phoneSmall.scale});								if (manualRotate) {					TweenMax.killTweensOf(videoHolder);					TweenMax.killTweensOf(phoneHolder.imagesHolder);										TweenMax.to(videoHolder, 0, {y:videoY, scaleX:1, scaleY:1});					TweenMax.to(phoneHolder.imagesHolder, tweenTime, {y:0, scaleX:1,scaleY:1});				}			} else {				trace("reveal regular");				//TweenMax.to(videoHolder, tweenTime, {y:videoY, scaleX:1,scaleY:1});				videoHolder.alpha = 1;				TweenMax.to(videoHolder, 0, {y:videoY});				TweenMax.to(phoneHolder.imagesHolder, tweenTime, {y:0, scaleX:1,scaleY:1});								videoHolder.rotationX = rotationObj.rotationX;				videoHolder.rotationY = rotationObj.rotationY;				videoHolder.rotationZ = rotationObj.rotationZ;				//videoHolder.scaleX =videoHolder.scaleY=rotationObj.value;								videoHolder.scaleX = rotationObj.scaleX;				videoHolder.scaleY = rotationObj.scaleY;				if (rotationObj.px) {					videoHolder.x = rotationObj.px;					videoHolder.y = rotationObj.py;					//videoHolder.scaleX = rotationObj.scaleX;					//videoHolder.scaleY=rotationObj.scaleY;										//trace("videoHolder.px=" + rotationObj.px);				} else {					videoHolder.x = videoX;					videoHolder.y = videoY;				}				pp.fieldOfView=rotationObj.fv;				videoHolder.transform.perspectiveProjection=pp;			}						trace("totalImgNum=" + totalImgNum);			trace("audioFrontRightFrame=" + audioFrontRightFrame);			trace("audioFrontLeftFrame=" + audioFrontLeftFrame);						//adjust audio chanel			if (currentPhoneFrame <= audioFrontRightFrame) {				currentPan = -1 * ((currentPhoneFrame)/audioFrontRightFrame);								//increase left sound				if (playAudioBack) {					playAudioBack = false;					if (!videoBuffering) playAudio(true);				}			} else if (currentPhoneFrame >= audioFrontLeftFrame) {				currentPan = 1 * ((totalImgNum -currentPhoneFrame)/(totalImgNum-audioFrontLeftFrame))				//increase right sound				if (playAudioBack) {					playAudioBack = false;					if (!videoBuffering) playAudio(true);				}			} else {				//play alt back sound				if (currentPhoneFrame < audioBackRightFrame) {										//left pan					currentPan = -1 * (1-(currentPhoneFrame-audioFrontRightFrame)/(audioBackRightFrame-audioFrontRightFrame));				} else {					//right pan					currentPan = 1 * ((currentPhoneFrame-audioBackRightFrame)/(audioFrontLeftFrame-audioBackRightFrame));									}				if (!playAudioBack) {					playAudioBack = true;					if (!videoBuffering) playAudio(true);				}			}						trace("currentPan=" + currentPan);						updatePanning();					}				private function updatePanning():void {			if (currentSC) {				if (currentPan >= 1) currentPan = .95;				if (currentPan <= -1) currentPan = -.95;				//trace("current pan = " + currentPan);				var _soundTransform = new SoundTransform();				_soundTransform.pan = currentPan;				if (_audioControl.mute) _soundTransform.volume = 0;				else  _soundTransform.volume = 1;				currentSC.soundTransform = _soundTransform;			}		}		private function showVideo(video:VideoLoader):void {						phoneHolder.addEventListener(MouseEvent.MOUSE_DOWN, onPhoneOver);			phoneHolder.addEventListener(MouseEvent.MOUSE_OUT, onPhoneOut);			phoneHolder.addEventListener(MouseEvent.MOUSE_UP, onPhoneOut);						//set the _currentLoader variable so that it refers to the new video.			_currentVideo = video;						//start playing the video from its beginning			_currentVideo.gotoVideoTime(0, true);						//when we addChild() the VideoLoader's content, it makes it rise to the top of the stacking order			phoneHolder.addChild(_currentVideo.content);			phoneHolder.initHitArea();			//fade the VideoLoader's content alpha in. Remember, the "content" refers to the ContentDisplay Sprite that we see on the stage.			TweenMax.to(_currentVideo.content, 0.8, {autoAlpha:1});					}				private function ns_onMetaData(item:Object):void {			//trace("metaData");			video.x = -video.width/2;			video.y = -video.height/2;		}				private function ns_onCuePoint(item:Object):void {			trace("cuePoint");			trace(item.name + "\t" + item.time);		}				private function netStatusHandler(event:NetStatusEvent):void {			trace("event.info.code=" + event.info.code);			switch (event.info.code) {				case "NetStream.Buffer.Empty":					//Pause audio					playAudio(false);					videoBuffering = true;					break;				case "NetStream.Buffer.Full":					if (initPlayFlag) {						ns.pause();							initPlayFlag = false;						return;					}					//Play audio					playAudio();					videoBuffering = false;					break;				case "NetStream.Play.Stop":					trace("ns time=" + ns.time);					playBtn.alpha = 1;					//playBtn.visible = true;					videoEnded = true;										audioBackLoader.gotoSoundTime(0,false);					audioFrontLoader.gotoSoundTime(0,false);					audioFrontLoader.pauseSound();					audioBackLoader.pauseSound();					break; 			}		}				private function playAudio(_play:Boolean = true):void {			trace("playAudio=" + _play);			if (ns.time < 1) {				TweenMax.to(video, 0, {alpha:1, delay:1-ns.time, onComplete:function() {					playAudio(_play);					}});				return;			}			var soundTime:Number = Math.max(audioFrontLoader.soundTime, audioBackLoader.soundTime);			if (_play) {				if (playAudioBack) {					audioFrontLoader.pauseSound();					audioBackLoader.gotoSoundTime(soundTime, true);					currentSC = audioBackLoader.channel;				} else {					audioFrontLoader.gotoSoundTime(soundTime, true);					audioBackLoader.pauseSound();					currentSC = audioFrontLoader.channel;				} 			} else {				audioFrontLoader.pauseSound();				audioBackLoader.pauseSound();			}						updatePanning();		}						private function onPhoneOver(e:MouseEvent):void {			trace("onPhoneOver");						if (playBtn.visible && (mouseY >= 207 && mouseY <= 272 && mouseX >= 376 && mouseX <= 441 && currentPhoneFrame == 0)) {				trace("mouseX=" + mouseX)				trace("mouseY=" + mouseY)				onPlayClick(e);			}			if (!manualRotate) phoneHolder.addEventListener(MouseEvent.MOUSE_MOVE, onPhoneMove);					}				private function updateHint(e:Event):void {			trace("onPhoneOver");			_rotationHint.x = mouseX;			_rotationHint.y = mouseY;		}						private function showHint(e:MouseEvent):void {			//trace("onPhoneOver");			_rotationHint.x = mouseX;			_rotationHint.y = mouseY;			_rotationHint.visible = true;			Mouse.cursor="hand";		}				private var manualRotate:Boolean = false;		private var rotateInterval:Number;				private function onPhoneRotate(e:MouseEvent):void {			if (manualRotate) return;			manualRotate = true;						currentPhoneFrame++;			fullRotation();		}				private function fullRotation():void {			if (currentPhoneFrame >= imageList.length) currentPhoneFrame = 0;			phoneHolder.showPhoneFrame(currentPhoneFrame);			updateVideoPerspective();				trace("next currentPhoneFrame=" + currentPhoneFrame);			clearInterval(rotateInterval);			if (currentPhoneFrame == 0) {				manualRotate = false;				return;			} else {				currentPhoneFrame++				rotateInterval = setInterval(fullRotation, 2/imageList.length*800);			};		}				private function onPhoneOut(e:MouseEvent):void {			//trace("onPhoneOut");			//_rotationHint.visible = false;			Mouse.cursor="auto";			phoneHolder.removeEventListener(MouseEvent.MOUSE_MOVE, onPhoneMove);		}		private function onPhoneMove(e:MouseEvent):void {			//trace("onPhoneMove");			if (playBtn.alpha == 1) {				onPlayClick(e);			}			if (currentPhoneMouseX > 0) {				if (mouseX > currentPhoneMouseX) {					//rotate right					currentPhoneFrame++;				} else {					//rotate left					currentPhoneFrame--;				}			} else {				//Intial Move				currentPhoneMouseX = mouseX;				return;			}			currentPhoneMouseX = mouseX;			if (currentPhoneFrame >= imageList.length) {				currentPhoneFrame = 0;			} else if (currentPhoneFrame < 0) {				currentPhoneFrame = imageList.length - 1;			}			phoneHolder.showPhoneFrame(currentPhoneFrame);			updateVideoPerspective();		}	}}